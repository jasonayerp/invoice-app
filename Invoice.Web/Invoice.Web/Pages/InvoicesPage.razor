@page "/invoices"

@if (Exception != null)
{
    <h1>@Exception.Message</h1>
}

@if (Addresses == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Address Line 1</th>
                    <th>Address Line 2</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Zip</th>
                </tr>
            </thead>
            <tbody>
                @if (Addresses.Count() == 0)
                {
                    <tr>
                        <td colspan="5">
                            No invoices
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var address in Addresses)
                    {
                        <tr>
                            <td>@address.AddressLine1</td>
                            <td>@(address.AddressLine2 ?? "")</td>
                            <td>@address.City</td>
                            <td>@address.Region</td>
                            <td>@address.PostalCode</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

<h3>Address:</h3>
@if (SuggestedAddress != null)
{
    <div>
        <input type="radio" name="address" checked="@(!UseSuggestedAddress)" @onchange="@((args) => UseSuggestedAddress = false)" />
        <label>Use address</label>
        <p>
            @Address.AddressLine1
            <br />
            @if (!string.IsNullOrEmpty(Address.AddressLine2))
            {
                @Address.AddressLine2
                <br />
            }
            @($"{Address.City}, {Address.Region} {Address.PostalCode}")
        </p>
    </div>
    <div>
        <div>
            <input type="radio" name="address" checked="@(UseSuggestedAddress)" @onchange="@((args) => UseSuggestedAddress = true)" />
            <label>Use suggested address</label>
        </div>
        <p>
            @SuggestedAddress.AddressLine1
            <br />
            @if (!string.IsNullOrEmpty(SuggestedAddress.AddressLine2))
            {
                @SuggestedAddress.AddressLine2
                <br />
            }
            @($"{SuggestedAddress.City}, {SuggestedAddress.Region} {SuggestedAddress.PostalCode}")
        </p>
    </div>
}
else
{
    <p>Address Line 1:</p>
    <input type="text" @bind="Address.AddressLine1" @bind:event="oninput" class="form-control" />
    <p>Address Line 2:</p>
    <input type="text" @bind="Address.AddressLine2" @bind:event="oninput" class="form-control" />
    <p>City:</p>
    <input type="text" @bind="Address.City" @bind:event="oninput" class="form-control" />
    <p>State:</p>
    @if (Regions != null)
    {
        <select @bind="@Address.Region" @bind:event="oninput" class="form-control">
            <option value=""></option>
            @foreach (Region region in Regions)
            {
                <option value="@region.Code">@region.Name</option>
            }
        </select>
    }
    <p>Zip:</p>
    <input type="text" @bind="Address.PostalCode" @bind:event="oninput" class="form-control" />
}

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCreateAddressClick">Verify</MudButton>

@using Invoice.Domains.Common.Models
@using Globalization.Mail

@inject IAddressService AddressService
@inject IAddressVerificationService AddressVerificationService
@inject ICacheProvider CacheProvider

@code {
    protected List<AddressModel>? Addresses { get; set; }
    protected Exception? Exception { get; set; }
    protected AddressModel Address { get; set; } = new AddressModel();
    protected AddressModel? SuggestedAddress { get; set; }
    protected bool UseSuggestedAddress { get; set; } = false;
    protected List<Region>? Regions { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Addresses = await CacheProvider.GetOrCreateItemAsync("addresses", async () => await AddressService.GetAllAsync());
        }
        catch(Exception ex)
        {
            Exception = ex;
        }

        Regions = MailHelper.GetRegions(CountryCode.US);

        StateHasChanged();
    }

    protected async Task HandleCreateAddressClick()
    {
        SuggestedAddress = await AddressVerificationService.VerifyAddressAsync(Address);
    }
}
